/**
 * Zighang API Document
 * 직행 프로젝트의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import type { ClovaOcrResponse } from "../models";
/**
 * OcrControllerApi - axios parameter creator
 */
export const OcrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrByUrl: async (imageUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter "imageUrl" is not null or undefined
            assertParamExists("ocrByUrl", "imageUrl", imageUrl)
            const localVarPath = `/api/ocr/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (imageUrl !== undefined) {
                localVarQueryParameter["imageUrl"] = imageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrTextByUrl: async (imageUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter "imageUrl" is not null or undefined
            assertParamExists("ocrTextByUrl", "imageUrl", imageUrl)
            const localVarPath = `/api/ocr/json/text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (imageUrl !== undefined) {
                localVarQueryParameter["imageUrl"] = imageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OcrControllerApi - functional programming interface
 */
export const OcrControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OcrControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrByUrl(imageUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClovaOcrResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrByUrl(imageUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["OcrControllerApi.ocrByUrl"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrTextByUrl(imageUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrTextByUrl(imageUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["OcrControllerApi.ocrTextByUrl"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OcrControllerApi - factory interface
 */
export const OcrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OcrControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrByUrl(imageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<ClovaOcrResponse> {
            return localVarFp.ocrByUrl(imageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrTextByUrl(imageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.ocrTextByUrl(imageUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OcrControllerApi - interface
 */
export interface OcrControllerApiInterface {
    /**
     * 
     * @param {string} imageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ocrByUrl(imageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<ClovaOcrResponse>;

    /**
     * 
     * @param {string} imageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ocrTextByUrl(imageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * OcrControllerApi - object-oriented interface
 */
export class OcrControllerApi extends BaseAPI implements OcrControllerApiInterface {
    /**
     * 
     * @param {string} imageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ocrByUrl(imageUrl: string, options?: RawAxiosRequestConfig) {
        return OcrControllerApiFp(this.configuration).ocrByUrl(imageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ocrTextByUrl(imageUrl: string, options?: RawAxiosRequestConfig) {
        return OcrControllerApiFp(this.configuration).ocrTextByUrl(imageUrl, options).then((request) => request(this.axios, this.basePath));
    }
}

