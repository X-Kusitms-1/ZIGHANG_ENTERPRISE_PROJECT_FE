/**
 * Zighang API Document
 * 직행 프로젝트의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import type { TokenResult } from "../models";
/**
 * KakaoLoginControllerApi - axios parameter creator
 */
export const KakaoLoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 카카오 인가 코드로 소셜 로그인을 진행하며, 성공 시 서비스 자체 JWT(Access/Refresh Token)와 신규 가입 여부를 반환합니다. 처음 로그인한 유저의 경우 isNewUser가 참으로 내려갑니다. 
         * @summary 카카오 소셜 로그인
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoLogin: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter "code" is not null or undefined
            assertParamExists("kakaoLogin", "code", code)
            const localVarPath = `/v1/auth/kakao`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter["code"] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KakaoLoginControllerApi - functional programming interface
 */
export const KakaoLoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KakaoLoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 카카오 인가 코드로 소셜 로그인을 진행하며, 성공 시 서비스 자체 JWT(Access/Refresh Token)와 신규 가입 여부를 반환합니다. 처음 로그인한 유저의 경우 isNewUser가 참으로 내려갑니다. 
         * @summary 카카오 소셜 로그인
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kakaoLogin(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kakaoLogin(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["KakaoLoginControllerApi.kakaoLogin"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * KakaoLoginControllerApi - factory interface
 */
export const KakaoLoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KakaoLoginControllerApiFp(configuration)
    return {
        /**
         * 카카오 인가 코드로 소셜 로그인을 진행하며, 성공 시 서비스 자체 JWT(Access/Refresh Token)와 신규 가입 여부를 반환합니다. 처음 로그인한 유저의 경우 isNewUser가 참으로 내려갑니다. 
         * @summary 카카오 소셜 로그인
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoLogin(code: string, options?: RawAxiosRequestConfig): AxiosPromise<TokenResult> {
            return localVarFp.kakaoLogin(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KakaoLoginControllerApi - interface
 */
export interface KakaoLoginControllerApiInterface {
    /**
     * 카카오 인가 코드로 소셜 로그인을 진행하며, 성공 시 서비스 자체 JWT(Access/Refresh Token)와 신규 가입 여부를 반환합니다. 처음 로그인한 유저의 경우 isNewUser가 참으로 내려갑니다. 
     * @summary 카카오 소셜 로그인
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kakaoLogin(code: string, options?: RawAxiosRequestConfig): AxiosPromise<TokenResult>;

}

/**
 * KakaoLoginControllerApi - object-oriented interface
 */
export class KakaoLoginControllerApi extends BaseAPI implements KakaoLoginControllerApiInterface {
    /**
     * 카카오 인가 코드로 소셜 로그인을 진행하며, 성공 시 서비스 자체 JWT(Access/Refresh Token)와 신규 가입 여부를 반환합니다. 처음 로그인한 유저의 경우 isNewUser가 참으로 내려갑니다. 
     * @summary 카카오 소셜 로그인
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public kakaoLogin(code: string, options?: RawAxiosRequestConfig) {
        return KakaoLoginControllerApiFp(this.configuration).kakaoLogin(code, options).then((request) => request(this.axios, this.basePath));
    }
}

