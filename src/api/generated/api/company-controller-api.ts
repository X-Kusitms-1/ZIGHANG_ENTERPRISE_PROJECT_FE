/**
 * Zighang API Document
 * 직행 프로젝트의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import type { CompanyDetailWithSimilarResponse } from "../models";
// @ts-ignore
import type { PageCompanyWithNewsResponse } from "../models";
// @ts-ignore
import type { RspTemplateListCompanyWithNewsResponse } from "../models";
/**
 * CompanyControllerApi - axios parameter creator
 */
export const CompanyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (companyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter "companyId" is not null or undefined
            assertParamExists("getDetail", "companyId", companyId)
            const localVarPath = `/v1/companies/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscribedCompaniesWithNews: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter "userId" is not null or undefined
            assertParamExists("getSubscribedCompaniesWithNews", "userId", userId)
            const localVarPath = `/v1/companies/{userId}/subscriptions`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Set<SearchWithNewsTypesEnum>} [types] 
         * @param {Set<SearchWithNewsJobGroupsEnum>} [jobGroups] 
         * @param {Set<string>} [regionCodes] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchWithNews: async (types?: Set<SearchWithNewsTypesEnum>, jobGroups?: Set<SearchWithNewsJobGroupsEnum>, regionCodes?: Set<string>, page?: number, size?: number, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (types) {
                localVarQueryParameter["types"] = Array.from(types);
            }

            if (jobGroups) {
                localVarQueryParameter["jobGroups"] = Array.from(jobGroups);
            }

            if (regionCodes) {
                localVarQueryParameter["regionCodes"] = Array.from(regionCodes);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyControllerApi - functional programming interface
 */
export const CompanyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(companyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDetailWithSimilarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["CompanyControllerApi.getDetail"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscribedCompaniesWithNews(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RspTemplateListCompanyWithNewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscribedCompaniesWithNews(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["CompanyControllerApi.getSubscribedCompaniesWithNews"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Set<SearchWithNewsTypesEnum>} [types] 
         * @param {Set<SearchWithNewsJobGroupsEnum>} [jobGroups] 
         * @param {Set<string>} [regionCodes] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchWithNews(types?: Set<SearchWithNewsTypesEnum>, jobGroups?: Set<SearchWithNewsJobGroupsEnum>, regionCodes?: Set<string>, page?: number, size?: number, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCompanyWithNewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchWithNews(types, jobGroups, regionCodes, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["CompanyControllerApi.searchWithNews"]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompanyControllerApi - factory interface
 */
export const CompanyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<CompanyDetailWithSimilarResponse> {
            return localVarFp.getDetail(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscribedCompaniesWithNews(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<RspTemplateListCompanyWithNewsResponse> {
            return localVarFp.getSubscribedCompaniesWithNews(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Set<SearchWithNewsTypesEnum>} [types] 
         * @param {Set<SearchWithNewsJobGroupsEnum>} [jobGroups] 
         * @param {Set<string>} [regionCodes] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchWithNews(types?: Set<SearchWithNewsTypesEnum>, jobGroups?: Set<SearchWithNewsJobGroupsEnum>, regionCodes?: Set<string>, page?: number, size?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<PageCompanyWithNewsResponse> {
            return localVarFp.searchWithNews(types, jobGroups, regionCodes, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyControllerApi - interface
 */
export interface CompanyControllerApiInterface {
    /**
     * 
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDetail(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<CompanyDetailWithSimilarResponse>;

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscribedCompaniesWithNews(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<RspTemplateListCompanyWithNewsResponse>;

    /**
     * 
     * @param {Set<SearchWithNewsTypesEnum>} [types] 
     * @param {Set<SearchWithNewsJobGroupsEnum>} [jobGroups] 
     * @param {Set<string>} [regionCodes] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchWithNews(types?: Set<SearchWithNewsTypesEnum>, jobGroups?: Set<SearchWithNewsJobGroupsEnum>, regionCodes?: Set<string>, page?: number, size?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<PageCompanyWithNewsResponse>;

}

/**
 * CompanyControllerApi - object-oriented interface
 */
export class CompanyControllerApi extends BaseAPI implements CompanyControllerApiInterface {
    /**
     * 
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getDetail(companyId: number, options?: RawAxiosRequestConfig) {
        return CompanyControllerApiFp(this.configuration).getDetail(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getSubscribedCompaniesWithNews(userId: number, options?: RawAxiosRequestConfig) {
        return CompanyControllerApiFp(this.configuration).getSubscribedCompaniesWithNews(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Set<SearchWithNewsTypesEnum>} [types] 
     * @param {Set<SearchWithNewsJobGroupsEnum>} [jobGroups] 
     * @param {Set<string>} [regionCodes] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchWithNews(types?: Set<SearchWithNewsTypesEnum>, jobGroups?: Set<SearchWithNewsJobGroupsEnum>, regionCodes?: Set<string>, page?: number, size?: number, sort?: string, options?: RawAxiosRequestConfig) {
        return CompanyControllerApiFp(this.configuration).searchWithNews(types, jobGroups, regionCodes, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}

export enum SearchWithNewsTypesEnum {
    LargeEnterprise = "LARGE_ENTERPRISE",
    MidSizedEnterprise = "MID_SIZED_ENTERPRISE",
    SmallMediumEnterprise = "SMALL_MEDIUM_ENTERPRISE",
    Startup = "STARTUP",
    Unicorn = "UNICORN",
    ForeignCompany = "FOREIGN_COMPANY",
    PublicOrStateOwned = "PUBLIC_OR_STATE_OWNED",
    FinancialServices = "FINANCIAL_SERVICES",
    Other = "OTHER"
}
export enum SearchWithNewsJobGroupsEnum {
    SoftwareEngineering = "SOFTWARE_ENGINEERING",
    DataAi = "DATA_AI",
    Design = "DESIGN",
    ProductManagement = "PRODUCT_MANAGEMENT",
    MarketingAdsPr = "MARKETING_ADS_PR",
    SalesBusiness = "SALES_BUSINESS",
    BusinessAdminHr = "BUSINESS_ADMIN_HR",
    CustomerSuccessSupport = "CUSTOMER_SUCCESS_SUPPORT",
    ManufacturingQaProcurement = "MANUFACTURING_QA_PROCUREMENT",
    LogisticsTransport = "LOGISTICS_TRANSPORT",
    ResearchRnd = "RESEARCH_RND",
    Education = "EDUCATION",
    MedicalBio = "MEDICAL_BIO",
    OtherProfessionals = "OTHER_PROFESSIONALS"
}
